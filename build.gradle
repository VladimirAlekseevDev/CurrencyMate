plugins {
    id 'java'
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$dependencyManagementVersion"
    id "org.sonarqube" version "$sonarqubeVersion"
}

group = 'dev.sgd.currencymate'
version = '0.0.1'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

allprojects {

    apply plugin: 'java-library'
    apply plugin: 'org.sonarqube'

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        annotationProcessor (
                "org.projectlombok:lombok:$lombokVersion",
                "org.mapstruct:mapstruct-processor:$mapstructVersion"
        )

        compileOnly (
                "org.projectlombok:lombok:$lombokVersion"
        )
        implementation(
                "org.springframework.boot:spring-boot-starter:$springBootVersion",
                "org.mapstruct:mapstruct:$mapstructVersion",
                "org.apache.commons:commons-lang3:$commonsLang3Version"
        )
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

}

dependencies {
    implementation(
            /* Spring Cloud */
            "org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j",

            /* Spring Logging */
            "org.springframework.boot:spring-boot-starter-logging", // TODO Maybe move to allprojects

            /* Spring Monitoring and Management dependencies */
            "org.springframework.boot:spring-boot-starter-actuator",

            project(":domain"),
            project(":services"),
            project(":api"),
            project(":adapter-alphavantage"),
    )

    testImplementation (
            "org.springframework.boot:spring-boot-starter-test"
    )

    testRuntimeOnly (
            "org.junit.platform:junit-platform-launcher"
    )
}

tasks.named("test") {
    useJUnitPlatform()
}